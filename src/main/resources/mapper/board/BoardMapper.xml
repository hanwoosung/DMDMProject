<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.dmdm.repository.dao.board.BoardDao">

    <select id="getBoardList" resultType="kr.co.dmdm.dto.board.BoardListDto">
        SELECT a.board_id,
               a.board_type,
               a.board_title,
               a.board_content,
               a.user_id,
               fnc_timestamp(a.insert_dt) AS `insert`,
               a.insert_dt,
               a.update_dt,
               a.`status`,
               a.v_cnt,
               b.user_name,
               b.user_level,
               IFNULL(c.file_path, '/') AS file_path,
               GROUP_CONCAT(d.tag) AS tag,
               COUNT(f.like_target) AS likeCnt,
               IFNULL(g.commentCnt, 0) AS commentCnt
        FROM tbl_board a FORCE INDEX(idx_tbl_board_01)
        LEFT JOIN tbl_user b ON a.user_id = b.user_id
        LEFT JOIN tbl_file c FORCE INDEX (idx_tbl_file_01) ON a.user_id = c.file_ref_no AND c.file_type = 'PROFILE'
        LEFT JOIN (
            SELECT board_id, GROUP_CONCAT(DISTINCT tag) AS tag
            FROM tbl_board_tag
            GROUP BY board_id
        ) d ON a.board_id = d.board_id
        LEFT JOIN tbl_black_list e ON a.user_id = e.receive_user_id AND e.send_user_id = #{sess}
        LEFT JOIN tbl_likes f ON f.like_target_type = 'BOARD' AND f.like_target = a.board_id AND f.like_type = 'LIKE'
        LEFT JOIN (
            SELECT board_id, COUNT(comment_id) AS commentCnt
            FROM tbl_comment
            WHERE status = 'ACTIVE'
            GROUP BY board_id
        ) g ON g.board_id = a.board_id
        WHERE a.board_type = #{boardType}
        AND a.status = #{status}
        AND e.send_user_id IS NULL
        <trim prefix="AND (" suffix=")" prefixOverrides="AND">
            <if test="searchType == 'title'">
                a.board_title LIKE CONCAT('%', #{searchData}, '%')
            </if>
            <if test="searchType == 'content'">
                a.board_content LIKE CONCAT('%', #{searchData}, '%')
            </if>
            <if test="searchType == 'writer'">
                b.user_name LIKE CONCAT('%', #{searchData}, '%')
            </if>
            <if test="searchType == 'all'">
                (a.board_title LIKE CONCAT('%', #{searchData}, '%')
                OR a.board_content LIKE CONCAT('%', #{searchData}, '%')
                OR b.user_name LIKE CONCAT('%', #{searchData}, '%'))
            </if>
        </trim>
        GROUP BY a.board_id
        ORDER BY
        <choose>
            <when test="sortType == 'pop'">
                a.v_cnt DESC, a.board_id
            </when>
            <otherwise>
                a.board_id DESC
            </otherwise>
        </choose>
        LIMIT #{page}, #{size}
    </select>





    <select id="getBoardCnt">

        SELECT COUNT(*)
        FROM tbl_board a
        LEFT JOIN tbl_user b ON a.user_id = b.user_id
        WHERE a.board_type = #{boardType}
        AND a.status = #{status}
        <trim prefix="AND (" suffix=")" prefixOverrides="AND">
            <if test="searchType == 'title'">
                a.board_title LIKE CONCAT('%', #{searchData}, '%')
            </if>
            <if test="searchType == 'content'">
                a.board_content LIKE CONCAT('%', #{searchData}, '%')
            </if>
            <if test="searchType == 'writer'">
                b.user_name LIKE CONCAT('%', #{searchData}, '%')
            </if>
            <if test="searchType == 'all'">
                (a.board_title LIKE CONCAT('%', #{searchData}, '%')
                OR a.board_content LIKE CONCAT('%', #{searchData}, '%')
                OR b.user_name LIKE CONCAT('%', #{searchData}, '%'))
            </if>
        </trim>

    </select>

    <select id="getBoard" resultType="kr.co.dmdm.dto.board.BoardDetailDto">

        SELECT a.board_id,
               a.board_type,
               b.name AS board_type_name,
               a.board_title,
               a.board_content,
               a.user_id,
               e.user_name,
               e.user_level,
               fnc_timestamp(a.insert_dt) AS `insert`,
               a.insert_dt,
               a.update_dt,
               a.`status`,
               a.v_cnt,
               SUM(IF(c.like_type = 'LIKE', 1, 0)) AS like_cnt,
               SUM(IF(c.like_type = 'HATE', 1, 0)) AS hate_cnt,
               IFNULL(d.like_type, '') AS login_likes,
               f.tag,
               IFNULL(g.file_path, '/') AS file_path
        FROM tbl_board a
        LEFT JOIN tbl_common b ON a.board_type = b.code AND b.parent_code = 'BOARD_CATEGORY'
        LEFT JOIN tbl_likes c ON a.board_id = c.like_target AND c.like_target_type = 'BOARD'
        LEFT JOIN tbl_likes d ON a.board_id = d.like_target AND d.like_target_type = 'BOARD' AND d.user_id = #{sess}
        LEFT JOIN tbl_user e ON a.user_id = e.user_id
        LEFT JOIN (
            SELECT board_id, GROUP_CONCAT(DISTINCT tag) AS tag
            FROM tbl_board_tag
            GROUP BY board_id
        ) f ON a.board_id = f.board_id
        LEFT JOIN tbl_file g ON a.user_id = g.file_ref_no AND g.file_type = 'PROFILE'
        WHERE a.board_id = ${boardId}
        GROUP BY a.board_id;

    </select>

    <select id="getComments" resultType="kr.co.dmdm.dto.board.CommentDto">
        WITH RECURSIVE comment_tree AS (
            SELECT
                board_id,
                comment_id,
                parent_comment_id,
                comment_content,
                comment_type,
                user_id,
                fnc_timestamp(insert_dt) AS `insert`,
                insert_dt,
                update_dt,
                status,
                0 AS depth,
                CAST(comment_id AS CHAR(255)) AS sort_order
            FROM tbl_comment
            WHERE board_id = ${boardId} AND parent_comment_id = 0

            UNION ALL

            SELECT
                c.board_id,
                c.comment_id,
                c.parent_comment_id,
                c.comment_content,
                c.comment_type,
                c.user_id,
                fnc_timestamp(c.insert_dt) AS `insert`,
                c.insert_dt,
                c.update_dt,
                c.status,
                ct.depth + 1 AS depth,
                CONCAT(ct.sort_order, '-', c.comment_id) AS sort_order
            FROM tbl_comment c JOIN comment_tree ct ON c.parent_comment_id = ct.comment_id
            WHERE c.board_id = ${boardId}
        )SELECT
            a.board_id,
            a.comment_id,
            a.parent_comment_id,
            a.depth,
            a.comment_content,
            a.comment_type,
            a.user_id,
            b.user_level,
            b.user_name,
            a.`insert`,
            a.insert_dt,
            a.update_dt,
            a.`status`,
            SUM(IF(c.like_type = 'LIKE', 1, 0)) AS like_cnt,
            SUM(IF(c.like_type = 'HATE', 1, 0)) AS hate_cnt,
            IFNULL(d.like_type, '') AS login_likes,
            IF(e.send_user_id IS NULL, 'N', 'Y') AS black_list_yn,
            IFNULL(f.file_path, '/') AS file_path
        FROM comment_tree a
        LEFT JOIN tbl_user b ON a.user_id = b.user_id
        LEFT JOIN tbl_likes c ON a.comment_id = c.like_target AND c.like_target_type = 'COMMENT'
        LEFT JOIN tbl_likes d ON a.comment_id = d.like_target AND d.like_target_type = 'COMMENT' AND d.user_id = #{sess}
        LEFT JOIN tbl_black_list e ON a.user_id = e.receive_user_id AND e.send_user_id = #{sess}
        LEFT JOIN tbl_file f ON a.user_id = f.file_ref_no AND f.file_type = 'PROFILE'
        GROUP BY a.comment_id
        ORDER BY sort_order ASC;

    </select>

    <insert id="insertLikes">
        INSERT INTO tbl_likes(
            like_target,
            like_target_type,
            user_id,
            like_type,
            insert_dt
        )VALUES (
            #{likes.likeTarget},
            #{likes.likeTargetType},
            #{likes.userId},
            #{likes.likeType},
            NOW()
        );
    </insert>

    <delete id="deleteLikes">
        DELETE FROM tbl_likes
        WHERE like_target = #{likes.likeTarget}
        AND like_target_type = #{likes.likeTargetType}
        AND user_id = #{likes.userId}
    </delete>

    <update id="addViewCount">
        UPDATE tbl_board
        SET v_cnt = v_cnt + 1
        WHERE board_id=${boardId}
    </update>

    <insert id="saveComment">
        INSERT INTO tbl_comment(
            parent_comment_id,
            board_id,
            depth,
            comment_content,
            comment_type,
            user_id,
            insert_dt,
            update_dt,
            `status`
        )VALUES (
            ${comment.parentCommentId},
            ${comment.boardId},
            ${comment.depth},
            #{comment.commentContent},
            #{comment.commentType},
            #{comment.userId},
            NOW(),
            NOW(),
            'ACTIVE'
        );

    </insert>

    <update id="deleteBoard">
        UPDATE tbl_board
        set status = 'DELETE'
        WHERE board_id = #{boardId}
    </update>

    <update id="deleteComment">
        UPDATE tbl_comment
        SET status = 'DELETE'
        WHERE comment_id = #{commentId}
    </update>

    <select id="getMyEmoticons" resultType="kr.co.dmdm.dto.board.MyEmoticonDto">
        SELECT a.item_id,
               a.item_type,
               a.user_id,
               b.order_no,
               c.file_path
        FROM tbl_user_item a
                 LEFT JOIN tbl_emoticon_detail b ON a.item_id = b.product_id
                 LEFT JOIN tbl_file c ON c.file_ref_no = CONCAT(b.product_id, '/', b.order_no) AND c.file_type = 'tbl_emoticon_detail'
        WHERE a.item_type = 'EMOTICON'
        AND a.user_id = #{sess}
    </select>
</mapper>